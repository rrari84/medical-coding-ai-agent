//Purpose: This code is utility module designed to extract structured information
//(answer, confidence, reasoning) from a natural language response generated by an AI model (like GPT 4-o or a custom agent).

//This function extracts the chosen multiple choice answer from an AI-generated response
//This is how itr works:
//It tries several regex patterns to match formats like "answer:B" or "The answer is C" or "option A"
//Patterns are checked in order of confidence. The most explicit patterns are checked first
//If none matches, the last resort is to search for any isolated A/B/C/D letters and return the last one found
//If still nothing is found, it defaults to 'A'
function extractAnswer(response) {
    console.log('üîç PARSING RESPONSE FOR ANSWER:', response.substring(0, 200) + '...');
    const patterns = [
        /ANSWER:\s*([A-D])/i,
        /Answer:\s*([A-D])/i,
        /FINAL_ANSWER:\s*([A-D])/i,
        /^([A-D])[\.\)]/m,
        /The answer is ([A-D])/i,
        /correct answer is ([A-D])/i,
        /I choose ([A-D])/i,
        /option ([A-D])/i,
        /select ([A-D])/i,
        /\b([A-D])\b(?=\s*(?:is|would be|represents|correct))/i,
        //Last resort - any A, B, C, D that appears
        /\b([A-D])\b/g
    ];
    
    for (let i = 0; i < patterns.length - 1; i++) {
        const pattern = patterns[i];
        const match = response.match(pattern);
        if (match) {
            console.log(`‚úÖ Found answer "${match[1]}" using pattern ${i + 1}`);
            return match[1].toUpperCase();
        }
    }
    //Last resort: find all A, B, C, D and take the last one
    const lastResortMatches = response.match(patterns[patterns.length - 1]);
    if (lastResortMatches && lastResortMatches.length > 0) {
        const lastMatch = lastResortMatches[lastResortMatches.length - 1];
        console.log(`‚ö†Ô∏è Using last resort answer: "${lastMatch}"`);
        return lastMatch.toUpperCase();
    }
    
    console.log('‚ùå No answer found, defaulting to A');
    return 'A';
}



//The purpose of this function is to extract the AI's confidence level from the response
//How it works:
//1.Scans for patterns like: whether the confidence shows a percentage/scale/number and converts it to decimals
//2.After extraction, the value is clamped to the valid range [0,1]
//3.If nothing is found, it defaults to 0.5(uncertain)
function extractConfidence(response) {
    console.log('üîç PARSING RESPONSE FOR CONFIDENCE:', response.substring(0, 300) + '...');

    const patterns = [
        //Standard decimal format (0.0-1.0)
        /CONFIDENCE:\s*([0-9]*\.?[0-9]+)/i,
        /Confidence:\s*([0-9]*\.?[0-9]+)/i,
        /FINAL_CONFIDENCE:\s*([0-9]*\.?[0-9]+)/i,
        
        //Percentage format (85%, 90%, etc.)
        /CONFIDENCE:\s*([0-9]+)%/i,
        /Confidence:\s*([0-9]+)%/i,
        /FINAL_CONFIDENCE:\s*([0-9]+)%/i,
        
        //Scale format (8/10, 9/10, etc.)
        /CONFIDENCE:\s*([0-9]+)\/10/i,
        /Confidence:\s*([0-9]+)\/10/i,
        /FINAL_CONFIDENCE:\s*([0-9]+)\/10/i,
        
        //Plain number format (assuming 1-10 scale)
        /CONFIDENCE:\s*([0-9]+)\s*$/im,
        /Confidence:\s*([0-9]+)\s*$/im,
        /FINAL_CONFIDENCE:\s*([0-9]+)\s*$/im,
        
        //Alternative phrasings
        /confidence level:\s*([0-9]*\.?[0-9]+)/i,
        /confidence:\s*([0-9]*\.?[0-9]+)/i,
        /certainty:\s*([0-9]*\.?[0-9]+)/i
    ];
    for (let i = 0; i < patterns.length; i++) {
        const match = response.match(patterns[i]);
        if (match) {
            let confidence = parseFloat(match[1]);
            console.log(`‚úÖ Found confidence "${match[1]}" using pattern ${i + 1}`);
            
            //Convert different scales to 0.0-1.0 range
            if (i >= 3 && i <= 5) {
                //Percentage format (85% -> 0.85)
                confidence = confidence / 100;
                console.log(`üìä Converted percentage to decimal: ${confidence}`);
            } else if (i >= 6 && i <= 8) {
                //Scale format (8/10 -> 0.8)
                confidence = confidence / 10;
                console.log(`üìä Converted scale to decimal: ${confidence}`);
            } else if (i >= 9 && i <= 11) {
                //Plain number - determine if it's 1-10 scale or 0-1 scale
                if (confidence > 1) {
                    confidence = confidence / 10;
                    console.log(`üìä Converted 1-10 scale to decimal: ${confidence}`);
                }
            }
            
            //Ensure confidence is within valid range
            confidence = Math.min(Math.max(confidence, 0), 1);
            console.log(`üìä Final confidence: ${confidence}`);
            return confidence;
        }
    }
    
    console.log('‚ùå No confidence found, defaulting to 0.5');
    return 0.5; //Lower default to indicate uncertainty
}

//This function extracts the textual explanation that justifies the answers
//How it works:
//1.Searches for reasoning blocks starting with: "Reasoning:", "Explanation:", "Because:", "Analysis:"
//2.uses lookahead matching to stop at the next uppercase header or end of the response.
//3.If none are found, it defaults for: 'Based on medical coding analysis.'
function extractReasoning(response) {
    console.log('üîç PARSING RESPONSE FOR REASONING...');
    const patterns = [
        /REASONING:\s*(.*?)(?=\n[A-Z_]+:|$)/is,
        /Reasoning:\s*(.*?)(?=\n[A-Z_]+:|$)/is,
        /DETAILED_REASONING:\s*(.*?)(?=\n[A-Z_]+:|$)/is,
        /reasoning:\s*(.*?)(?=\n[A-Z_]+:|$)/is,
        /explanation:\s*(.*?)(?=\n[A-Z_]+:|$)/is,
        /because:\s*(.*?)(?=\n[A-Z_]+:|$)/is,
        /analysis:\s*(.*?)(?=\n[A-Z_]+:|$)/is
    ];
    
    for (let i = 0; i < patterns.length; i++) {
        const match = response.match(patterns[i]);
        if (match) {
            const reasoning = match[1].trim();
            console.log(`‚úÖ Found reasoning using pattern ${i + 1}: "${reasoning.substring(0, 100)}..."`);
            return reasoning;
        }
    }
    
    console.log('‚ùå No reasoning found, using default');
    return 'Based on medical coding analysis.';
}

//The purpose for this function is to extract all three pieces of information in one call.
//Heres how it does it:
//1.Prints the full raw response.
//2.Calls extractAnswer, extractConfidence, and extractReasoning.
//3.Logs results
//4.Returns an object.
function extractAllResponseData(response) {
    console.log('\nüîç FULL RESPONSE ANALYSIS:');
    console.log('==========================================');
    console.log(response);
    console.log('==========================================\n');
    
    const answer = extractAnswer(response);
    const confidence = extractConfidence(response);
    const reasoning = extractReasoning(response);
    
    console.log('\nüìä EXTRACTION RESULTS:');
    console.log(`Answer: ${answer}`);
    console.log(`Confidence: ${confidence}`);
    console.log(`Reasoning: ${reasoning.substring(0, 100)}...`);
    
    return {
        answer,
        confidence,
        reasoning,
        rawResponse: response // Keep raw response for debugging
    };
}

// Fixed: Proper module exports
module.exports = {
    extractAllResponseData,
    extractAnswer,
    extractConfidence,
    extractReasoning
};